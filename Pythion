import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.*;

public class BWToCamelRouteTransformer {

    static class Transition {
        String from, to, conditionType, xpath;

        Transition(String from, String to, String conditionType, String xpath) {
            this.from = from;
            this.to = to;
            this.conditionType = conditionType;
            this.xpath = xpath;
        }
    }

    static String startNode = null;
    static String endNode = null;

    public static void main(String[] args) throws Exception {
        String inputXmlPath = "MainProcess.process"; // Your input file path

        // Parse input XML
        Document inputDoc = DocumentBuilderFactory.newInstance()
                .newDocumentBuilder().parse(new File(inputXmlPath));
        inputDoc.getDocumentElement().normalize();

        // Read <pd:startName>
        NodeList startNameNodes = inputDoc.getElementsByTagName("pd:startName");
        if (startNameNodes.getLength() >= 1) {
            startNode = startNameNodes.item(0).getTextContent().trim();
        }
        if (startNameNodes.getLength() >= 2) {
            endNode = startNameNodes.item(1).getTextContent().trim();
        }

        if (startNode == null || endNode == null) {
            throw new RuntimeException("Missing <pd:startName> for start or end node.");
        }

        List<Transition> transitions = parseTransitions(inputDoc);

        // Build transition map
        Map<String, List<Transition>> transitionMap = new LinkedHashMap<>();
        for (Transition t : transitions) {
            transitionMap.computeIfAbsent(t.from, k -> new ArrayList<>()).add(t);
        }

        // Output document
        Document outputDoc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
        Element route = outputDoc.createElement("route");
        outputDoc.appendChild(route);

        Set<String> visited = new HashSet<>();
        buildRoute(startNode, transitionMap, outputDoc, route, visited);
     //   outputDoc=removeDuplicatesInWhenBlocks(outputDoc);
      //  System.out.println("new op:"+Document.toString);

        // Write output
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
        transformer.transform(new DOMSource(outputDoc), new StreamResult(System.out));

     
    }

    private static List<Transition> parseTransitions(Document doc) {
        List<Transition> transitions = new ArrayList<>();
        NodeList nodeList = doc.getElementsByTagName("pd:transition");

        for (int i = 0; i < nodeList.getLength(); i++) {
            Element el = (Element) nodeList.item(i);
            String from = el.getElementsByTagName("pd:from").item(0).getTextContent().trim();
            String to = el.getElementsByTagName("pd:to").item(0).getTextContent().trim();
            String condType = el.getElementsByTagName("pd:conditionType").item(0).getTextContent().trim();
            Node xpathNode = el.getElementsByTagName("pd:xpath").item(0);
            String xpath = xpathNode != null ? xpathNode.getTextContent().trim() : null;

            transitions.add(new Transition(from, to, condType, xpath));
        }
        return transitions;
    }

    private static void buildRoute(String current, Map<String, List<Transition>> transitionMap,
                                   Document doc, Element parent, Set<String> visited) {
        if (visited.contains(current)) return;
        visited.add(current);

        Element currentElem = doc.createElement(formatTag(current));
        parent.appendChild(currentElem);

        List<Transition> transitions = transitionMap.get(current);
        if (transitions == null) return;

        Element choice = doc.createElement("choice");
        boolean hasChoice = false;

        for (Transition t : transitions) {
            Set<String> pathTracker = new HashSet<>();
            pathTracker.add(current);

            switch (t.conditionType) {
                case "xpath":
                    Element when = doc.createElement("when");
                    Element xpath = doc.createElement("xpath");
                    xpath.setTextContent(t.xpath);
                    when.appendChild(xpath);
                    buildSubRoute(t.to, transitionMap, doc, when, pathTracker);
                    choice.appendChild(when);
                    hasChoice = true;
                    break;

                case "otherwise":
                    Element otherwise = doc.createElement("otherwise");
                    buildSubRoute(t.to, transitionMap, doc, otherwise, pathTracker);
                    choice.appendChild(otherwise);
                    hasChoice = true;
                    break;

                case "always":
                    buildSubRoute(t.to, transitionMap, doc, parent, pathTracker);
                    break;
            }
        }

        if (hasChoice) parent.appendChild(choice);
    }

    private static void buildSubRoute(String next, Map<String, List<Transition>> map,
                                      Document doc, Element parent, Set<String> visited) {
        String tag = formatTag(next);
        if (visited.contains(tag)) return;

        visited.add(tag);
        Element elem = doc.createElement(tag);
        parent.appendChild(elem);

        if (!formatTag(next).equals(formatTag(endNode))) {
            buildRoute(next, map, doc, parent, visited);
        }
    }

    private static String formatTag(String tag) {
        return tag.trim().replace(" ", "_").replace("-", "_");
    }

    private static void removeDuplicatesInWhenBlocks(Document doc) {
        NodeList whenNodes = doc.getElementsByTagName("when");
    
        for (int i = 0; i < whenNodes.getLength(); i++) {
            Element when = (Element) whenNodes.item(i);
            Set<String> seen = new HashSet<>();
            NodeList children = when.getChildNodes();
            List<Node> toRemove = new ArrayList<>();
    
            for (int j = 0; j < children.getLength(); j++) {
                Node child = children.item(j);
                if (child.getNodeType() == Node.ELEMENT_NODE) {
                    String tag = child.getNodeName();
                    if (seen.contains(tag)) {
                        toRemove.add(child);  // Mark for removal
                    } else if (!tag.equals("xpath")) {
                        seen.add(tag);  // Skip <xpath>, only track route nodes
                    }
                }
            }
    

        }
    }
    
}
