import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.parser.v3.OpenAPIV3Parser;
import io.swagger.v3.oas.models.Components;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.File;
import java.util.Map;

public class SwaggerToXSDConverter {

    public static void main(String[] args) {
        String swaggerFile = "openapi.yaml"; // Path to Swagger file
        convertSwaggerToXSD(swaggerFile, "output.xsd");
    }

    public static void convertSwaggerToXSD(String swaggerPath, String outputXSDPath) {
        OpenAPI openAPI = new OpenAPIV3Parser().read(swaggerPath);

        if (openAPI == null) {
            System.out.println("Failed to parse Swagger file.");
            return;
        }

        Components components = openAPI.getComponents();
        if (components == null || components.getSchemas() == null) {
            System.out.println("No schemas found in Swagger file.");
            return;
        }

        Map<String, Schema> schemas = components.getSchemas();
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.newDocument();

            Element schemaElement = doc.createElement("xs:schema");
            schemaElement.setAttribute("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
            doc.appendChild(schemaElement);

            for (Map.Entry<String, Schema> entry : schemas.entrySet()) {
                String name = entry.getKey();
                Schema schema = entry.getValue();

                Element complexType = doc.createElement("xs:complexType");
                complexType.setAttribute("name", name);
                schemaElement.appendChild(complexType);

                Element sequence = doc.createElement("xs:sequence");
                complexType.appendChild(sequence);

                if (schema.getProperties() != null) {
                    for (Map.Entry<String, Schema> property : schema.getProperties().entrySet()) {
                        Element element = doc.createElement("xs:element");
                        element.setAttribute("name", property.getKey());
                        element.setAttribute("type", mapToXSDType(property.getValue().getType()));
                        sequence.appendChild(element);
                    }
                }
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(outputXSDPath));
            transformer.transform(source, result);

            System.out.println("XSD file generated: " + outputXSDPath);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String mapToXSDType(String swaggerType) {
        if (swaggerType == null) return "xs:string";
        return switch (swaggerType) {
            case "integer" -> "xs:int";
            case "boolean" -> "xs:boolean";
            case "number" -> "xs:double";
            case "string" -> "xs:string";
            case "array" -> "xs:complexType"; // Needs proper handling
            default -> "xs:string";
        };
    }
}
